/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CapaPresentacion;
import CapaDatos.Conexion;
import CapaNegocios.NCompras;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author lhtc9
 */
public class ComprasScn extends javax.swing.JFrame {
    
    private static ComprasScn cmp = new ComprasScn();
    
    /**
     * Creates new form InventarioScn
     */
    private ComprasScn() {
        initComponents();
        GetData();
        this.ingCmpBt.setVisible(false);
        this.editCmpBt.setVisible(false);
        this.guardaCmpBt.setVisible(false);
        this.eliminaCmpBt.setVisible(false);
        this.cancelaCmpBt.setVisible(false);
        this.creaCmpBt.setVisible(true);        
        GetDataProv();
        GetDataEmp();
    }

    public static ComprasScn getCmp() {
        return cmp;
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        creaCmpBt = new javax.swing.JButton();
        actualizaCmpBt = new javax.swing.JButton();
        ingCmpBt = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        descCmpTxt = new javax.swing.JTextField();
        cantCmpTxt = new javax.swing.JTextField();
        precCmpTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCmp = new javax.swing.JTable();
        editCmpBt = new javax.swing.JButton();
        guardaCmpBt = new javax.swing.JButton();
        eliminaCmpBt = new javax.swing.JButton();
        cancelaCmpBt = new javax.swing.JButton();
        etqTipoInv = new javax.swing.JLabel();
        provCmb = new javax.swing.JComboBox<String>();
        jLabel4 = new javax.swing.JLabel();
        empCmb = new javax.swing.JComboBox<String>();
        fchCmpTxt = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tipo de Item");
        setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("COMPRAS");

        creaCmpBt.setText("CREAR");
        creaCmpBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creaCmpBtActionPerformed(evt);
            }
        });

        actualizaCmpBt.setText("ACTUALIZAR");

        ingCmpBt.setText("INGRESAR");
        ingCmpBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingCmpBtActionPerformed(evt);
            }
        });

        jLabel2.setText("Fecha");

        jLabel3.setText("Descripción");

        descCmpTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descCmpTxtActionPerformed(evt);
            }
        });
        descCmpTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                descCmpTxtKeyTyped(evt);
            }
        });

        jLabel6.setText("Cantidad");

        jLabel7.setText("Precio");

        tablaCmp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Fecha", "Descripción", "Cantidad", "Precio", "Proveedor", "Empleado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCmp.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tablaCmp);
        if (tablaCmp.getColumnModel().getColumnCount() > 0) {
            tablaCmp.getColumnModel().getColumn(0).setMinWidth(0);
            tablaCmp.getColumnModel().getColumn(0).setPreferredWidth(0);
            tablaCmp.getColumnModel().getColumn(0).setMaxWidth(0);
            tablaCmp.getColumnModel().getColumn(1).setResizable(false);
            tablaCmp.getColumnModel().getColumn(1).setPreferredWidth(12);
            tablaCmp.getColumnModel().getColumn(2).setResizable(false);
            tablaCmp.getColumnModel().getColumn(3).setResizable(false);
            tablaCmp.getColumnModel().getColumn(4).setResizable(false);
            tablaCmp.getColumnModel().getColumn(4).setPreferredWidth(10);
            tablaCmp.getColumnModel().getColumn(5).setResizable(false);
            tablaCmp.getColumnModel().getColumn(5).setPreferredWidth(0);
            tablaCmp.getColumnModel().getColumn(6).setResizable(false);
        }

        editCmpBt.setText("Editar");
        editCmpBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCmpBtActionPerformed(evt);
            }
        });

        guardaCmpBt.setText("Guardar");

        eliminaCmpBt.setText("Eliminar");

        cancelaCmpBt.setText("Cancelar");

        etqTipoInv.setText("Proveedor");

        provCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " ", "<Agregar>" }));
        provCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                provCmbActionPerformed(evt);
            }
        });

        jLabel4.setText("Empleado");

        empCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "<Agregar>" }));
        empCmb.setToolTipText("");
        empCmb.setMinimumSize(new java.awt.Dimension(70, 20));
        empCmb.setPreferredSize(new java.awt.Dimension(70, 20));
        empCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empCmbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(ingCmpBt, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(precCmpTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(cantCmpTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(descCmpTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(fchCmpTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(creaCmpBt, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(etqTipoInv))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(provCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(empCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editCmpBt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(guardaCmpBt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eliminaCmpBt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelaCmpBt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actualizaCmpBt))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(71, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(309, 309, 309)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(creaCmpBt)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(fchCmpTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descCmpTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cantCmpTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(precCmpTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(provCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(etqTipoInv))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(empCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(ingCmpBt)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(actualizaCmpBt, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editCmpBt)
                        .addComponent(guardaCmpBt)
                        .addComponent(eliminaCmpBt)
                        .addComponent(cancelaCmpBt)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void creaCmpBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creaCmpBtActionPerformed
        this.ingCmpBt.setVisible(true);
        this.cancelaCmpBt.setVisible(true);
        this.fchCmpTxt.setEnabled(true);
        this.descCmpTxt.setEnabled(true);
        this.cantCmpTxt.enable(true);
        this.precCmpTxt.enable(true);
        this.provCmb.enable(true);
        this.empCmb.enable(true);
        this.fchCmpTxt.setDateFormatString("yyyy-MM-dd");
        this.descCmpTxt.setText("");
        this.cantCmpTxt.setText("");
        this.precCmpTxt.setText("");
        this.provCmb.setSelectedIndex(0);
        this.empCmb.setSelectedIndex(0);
    }//GEN-LAST:event_creaCmpBtActionPerformed

    private void descCmpTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descCmpTxtActionPerformed
        // TODO add your handling code here:        
    }//GEN-LAST:event_descCmpTxtActionPerformed

    private void ingCmpBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingCmpBtActionPerformed
        PushData();        
        this.fchCmpTxt.setEnabled(false);
        this.descCmpTxt.enable(false);
        this.cantCmpTxt.enable(false);
        this.precCmpTxt.enable(false);
        this.provCmb.enable(false);
        this.empCmb.enable(false);
        if(this.creaCmpBt.isEnabled()){
            this.cancelaCmpBt.setVisible(false);
        }
        else{
            this.cancelaCmpBt.setVisible(true);
        }
    }//GEN-LAST:event_ingCmpBtActionPerformed

    private void EditBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        this.fchCmpTxt.enable(true);
        this.descCmpTxt.enable(true);
        this.cantCmpTxt.enable(true);
        this.precCmpTxt.enable(true);
        this.provCmb.enable(true);
        this.empCmb.enable(true);
        this.guardaCmpBt.setVisible(true);
        this.editCmpBt.setVisible(false);
        this.eliminaCmpBt.setVisible(false);
    }  
    private void SaveBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        SaveData();
        this.editCmpBt.setVisible(false);
        this.eliminaCmpBt.setVisible(false);
        this.cancelaCmpBt.setVisible(false);
        this.creaCmpBt.setVisible(true);
    }
    private void ElimBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
        DeleteData();
        this.editCmpBt.setVisible(false);
        this.eliminaCmpBt.setVisible(false);
        this.cancelaCmpBt.setVisible(false);
        this.creaCmpBt.setVisible(true);
    } 
    private void CancelBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        boolean flag=true;
        if(this.ingCmpBt.isVisible()&&!this.creaCmpBt.isVisible()&&!this.editCmpBt.isVisible()&&!this.eliminaCmpBt.isVisible()){
            this.creaCmpBt.setVisible(true);
            this.ingCmpBt.setVisible(false);
            this.cancelaCmpBt.setVisible(false);
            this.fchCmpTxt.enable(false);
            this.descCmpTxt.enable(false);
            this.cantCmpTxt.enable(false);
            this.precCmpTxt.enable(false);
            this.provCmb.enable(false);
            this.empCmb.enable(false);
        }
        if(!this.editCmpBt.isVisible()&&this.guardaCmpBt.isVisible()&&!this.eliminaCmpBt.isVisible()){
            this.editCmpBt.setVisible(true);
            this.eliminaCmpBt.setVisible(true);
            this.guardaCmpBt.setVisible(false);
            this.fchCmpTxt.enable(false);
            this.descCmpTxt.enable(false);
            this.cantCmpTxt.enable(false);
            this.precCmpTxt.enable(false);
            this.provCmb.enable(false);
            this.empCmb.enable(false);
            flag=false;
        }
        if(this.editCmpBt.isVisible()&&this.eliminaCmpBt.isVisible()&&!this.guardaCmpBt.isVisible()&&flag){
            this.editCmpBt.setVisible(false);
            this.eliminaCmpBt.setVisible(false);
            this.creaCmpBt.setVisible(true);
            this.cancelaCmpBt.setVisible(false);
            this.fchCmpTxt.setDateFormatString("yyyy-MM-dd");
            this.descCmpTxt.setText("");
            this.cantCmpTxt.setText("");
            this.precCmpTxt.setText("");
            this.provCmb.setSelectedIndex(0);
            this.empCmb.setSelectedIndex(0);
        }
    }  
    private void CompTblMouseClicked(java.awt.event.MouseEvent evt) {                                      
        /*this.creaCmpBt.setVisible(false);
        this.editCmpBt.setVisible(true);
        this.eliminaCmpBt.setVisible(true);
        this.cancelaCmpBt.setVisible(true);
        int index = this.tablaInv.convertRowIndexToModel(this.tablaInv.getSelectedRow());
        this.fchCmpTxt.setText((String)this.tablaInv.getModel().getValueAt(index, 1)); 
        this.descCmpTxt.setText((String)this.tablaInv.getModel().getValueAt(index, 2));
        this.cantCmpTxt.setText((String)this.tablaInv.getModel().getValueAt(index, 3));
        this.precCmpTxt.setText((String)this.tablaInv.getModel().getValueAt(index, 3));*/
    } 
    
    private void descCmpTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_descCmpTxtKeyTyped
        /*char c =evt.getKeyChar();
        if(c<'0'||c>'9') evt.consume();
        if (descCmpTxt.getText().length()== 8) evt.consume();*/
    }//GEN-LAST:event_descCmpTxtKeyTyped

    private void editCmpBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCmpBtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_editCmpBtActionPerformed

    private void provCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_provCmbActionPerformed
        this.provCmb.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JComboBox<String> combo = (JComboBox<String>) e.getSource();
                String selectedBook = (String) combo.getSelectedItem();
                if(selectedBook.equals("<Agregar>")){
                    ProvScn pvd =ProvScn.getPrv();
                    pvd.setVisible(true);
                }
            }
        });
    }//GEN-LAST:event_provCmbActionPerformed

    private void empCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empCmbActionPerformed
        this.empCmb.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JComboBox<String> combo = (JComboBox<String>) e.getSource();
                String selectedBook = (String) combo.getSelectedItem();
                
                if(selectedBook.equals("<Agregar>")){
                    EmpleadoScn emp = EmpleadoScn.getEmp();
                    emp.setVisible(true);
                }
            }
        });
    }//GEN-LAST:event_empCmbActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ComprasScn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ComprasScn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ComprasScn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ComprasScn.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ComprasScn().setVisible(true);
            }
        });
    }
    protected void DeleteData(){
        int index = this.tablaCmp.convertRowIndexToModel(this.tablaCmp.getSelectedRow());
        String rpta="";
        try {
            int idProv = NCompras.BuscarProveedorNombre(this.provCmb.getSelectedItem().toString());
            int cant = Integer.parseInt(this.cantCmpTxt.getText());
            rpta = NCompras.Eliminar(Integer.parseInt(this.tablaCmp.getModel().getValueAt(index, 0).toString()),
                    this.fchCmpTxt.getDate().toString(), this.descCmpTxt.getText(), 
                    cant,Double.parseDouble(this.precCmpTxt.toString()),
                    idProv,this.empCmb.getSelectedIndex());
            if (rpta.equals("OK")){
                JOptionPane.showMessageDialog(new JFrame(),"Eliminado con exito...");
                this.fchCmpTxt.setDateFormatString("yyyy-MM-dd");
                this.descCmpTxt.setText("");
                this.cantCmpTxt.setText("");
                this.precCmpTxt.setText("");
                this.provCmb.setSelectedIndex(0);
                this.empCmb.setSelectedIndex(0);
                this.fchCmpTxt.enable(false);
                this.descCmpTxt.enable(false);
                this.cantCmpTxt.enable(false);
                this.precCmpTxt.enable(false);
                this.provCmb.enable(false);
                this.empCmb.enable(false);
            }else{
                JOptionPane.showMessageDialog(new JFrame(),rpta);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ComprasScn.class.getName()).log(Level.SEVERE, null, ex);
        }
        GetData();
    }
    protected void SaveData(){
        int index = this.tablaCmp.convertRowIndexToModel(this.tablaCmp.getSelectedRow());
        String rpta="";
        try {
            int idProv = NCompras.BuscarProveedorNombre(this.provCmb.getSelectedItem().toString());
            int cant = Integer.parseInt(this.cantCmpTxt.getText());
            rpta = NCompras.Editar(Integer.parseInt(this.tablaCmp.getModel().getValueAt(index, 0).toString()),
                    this.fchCmpTxt.getDate().toString(), this.descCmpTxt.getText(), 
                    cant,Double.parseDouble(this.precCmpTxt.toString()),
                    idProv,this.empCmb.getSelectedIndex());
            if (rpta.equals("OK")){
                JOptionPane.showMessageDialog(new JFrame(),"Editado con exito...");
                this.fchCmpTxt.setDateFormatString("yyyy-MM-dd");
                this.descCmpTxt.setText("");
                this.cantCmpTxt.setText("");
                this.precCmpTxt.setText("");
                this.provCmb.setSelectedIndex(0);
                this.empCmb.setSelectedIndex(0);
                this.fchCmpTxt.enable(false);
                this.descCmpTxt.enable(false);
                this.cantCmpTxt.enable(false);
                this.precCmpTxt.enable(false);
                this.provCmb.enable(false);
                this.empCmb.enable(false);
            }else{
                JOptionPane.showMessageDialog(new JFrame(),rpta);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ComprasScn.class.getName()).log(Level.SEVERE, null, ex);
        }
        GetData();
    }   
    protected void GetData(){
        ResultSet rs = null;
        DefaultTableModel model=null;
        try {
            rs = new NCompras().Mostrar();
            if(this.tablaCmp.getRowCount()!=0){
                model = (DefaultTableModel)this.tablaCmp.getModel();
                model.setRowCount(0);
            }
            model = (DefaultTableModel)this.tablaCmp.getModel();
            while(rs.next()){
                model.addRow( new Object[] {rs.getInt("idCompras"), rs.getString("fecha"), rs.getString("descripcion"), rs.getString("cantidad"), rs.getString("precio"), rs.getString("Proveedor_idProveedor"), rs.getString("Empleado_idEmpleado")});
            }
            this.tablaCmp.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(ComprasScn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    protected void GetDataProv(){
        ResultSet rs = null;
        
        try {
            
            rs = new NCompras().MostrarProv();
            if(this.provCmb.getItemCount()==2){
                
            }
            
            
            
            while(rs.next()){
                
                this.provCmb.addItem(rs.getString(1));
            }
            //this.empTbl.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(ProvScn.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    protected void GetDataEmp(){
        ResultSet rs = null;
        
        try {
            
            rs = new NCompras().MostrarEmp();
            if(this.empCmb.getItemCount()==2){
                
            }
            
            
            
            while(rs.next()){
                
                this.empCmb.addItem(rs.getString(1)+" "+rs.getString(2));
            }
            //this.empTbl.setModel(model);
        } catch (SQLException ex) {
            Logger.getLogger(ProvScn.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    protected void PushData(){
        try{
            String rpta="";
            if((this.fchCmpTxt.getDate().toString().equals(""))||(this.descCmpTxt.getText().equals(""))||(this.cantCmpTxt.getText().equals(""))||(this.precCmpTxt.getText().equals(""))||((this.provCmb.getSelectedIndex()==0)&&(this.provCmb.getSelectedIndex()==1))||((this.empCmb.getSelectedIndex()==0)&&(this.empCmb.getSelectedIndex()==1))){
                if(this.descCmpTxt.getText().equals("")){
                    JOptionPane.showMessageDialog(new JFrame(),"No ha ingresado datos en el campo Descripción. Vuelva a intentar","Error",JOptionPane.ERROR_MESSAGE);
                }
                if(this.cantCmpTxt.getText().equals("")){
                    JOptionPane.showMessageDialog(new JFrame(),"No ha ingresado datos en el campo Cantidad. Vuelva a intentar","Error",JOptionPane.ERROR_MESSAGE);
                }
                if(this.precCmpTxt.getText().equals("")){
                    JOptionPane.showMessageDialog(new JFrame(),"No ha ingresado datos en el campo Precio. Vuelva a intentar","Error",JOptionPane.ERROR_MESSAGE);
                }
                if(this.fchCmpTxt.getDate().toString().equals("")){
                    JOptionPane.showMessageDialog(new JFrame(),"No ha seleccionado la fecha campo Fecha. Vuelva a intentar","Error",JOptionPane.ERROR_MESSAGE);
                }
                if ((this.provCmb.getSelectedIndex()==0)&&(this.provCmb.getSelectedIndex()==1)){
                    JOptionPane.showMessageDialog(new JFrame(),"No ha seleccionado el Proveedor. Vuelva a intentar","Error",JOptionPane.ERROR_MESSAGE);
                }
                if ((this.empCmb.getSelectedIndex()==0)&&(this.empCmb.getSelectedIndex()==1)){
                    JOptionPane.showMessageDialog(new JFrame(),"No ha seleccionado el Empleado. Vuelva a intentar","Error",JOptionPane.ERROR_MESSAGE);
                }
            }
           else{
                int an = this.fchCmpTxt.getDate().getYear()+1900;
                int mon=this.fchCmpTxt.getDate().getMonth()+1;
                int day =this.fchCmpTxt.getDate().getDate();
                String emp=this.empCmb.getSelectedItem().toString();
                String[] split=emp.split(" ");
                String fch = ""+an+"-0"+mon+"-"+day;
                int idProv = NCompras.BuscarProveedorNombre(this.provCmb.getSelectedItem().toString());
                int idEmp=NCompras.BuscarEmpleadoNombre(split[0],split[1]);
                int cant = Integer.parseInt(this.cantCmpTxt.getText());
                rpta = NCompras.Insertar(fch, this.descCmpTxt.getText(),
                        cant ,Double.parseDouble(this.precCmpTxt.getText()),
                        idProv,
                        idEmp);
                if (rpta.equals("OK")){
                    JOptionPane.showMessageDialog(new JFrame(),"Ingresado con exito...");
                    this.fchCmpTxt.setDateFormatString("yyyy-MM-dd");
                    this.descCmpTxt.setText("");
                    this.cantCmpTxt.setText("");
                    this.precCmpTxt.setText("");
                    this.provCmb.setSelectedIndex(0);
                    this.empCmb.setSelectedIndex(0);
                    this.creaCmpBt.setVisible(true);
                    this.ingCmpBt.setVisible(false);
                    this.fchCmpTxt.enable(true);
                    this.descCmpTxt.enable(true);
                    this.cantCmpTxt.enable(true);
                    this.precCmpTxt.enable(true);
                    this.precCmpTxt.enable(true);
                    this.empCmb.enable(true);
                }
                else{
                    JOptionPane.showMessageDialog(new JFrame(),rpta);
                }
            }
        }
        catch(Exception e){
                   JOptionPane.showMessageDialog(new JFrame(),e.getMessage()+e.getStackTrace());
        }
        GetData();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizaCmpBt;
    private javax.swing.JButton cancelaCmpBt;
    private javax.swing.JTextField cantCmpTxt;
    private javax.swing.JButton creaCmpBt;
    private javax.swing.JTextField descCmpTxt;
    private javax.swing.JButton editCmpBt;
    private javax.swing.JButton eliminaCmpBt;
    private javax.swing.JComboBox<String> empCmb;
    private javax.swing.JLabel etqTipoInv;
    private com.toedter.calendar.JDateChooser fchCmpTxt;
    private javax.swing.JButton guardaCmpBt;
    private javax.swing.JButton ingCmpBt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField precCmpTxt;
    private javax.swing.JComboBox<String> provCmb;
    private javax.swing.JTable tablaCmp;
    // End of variables declaration//GEN-END:variables

    protected void setEmpCmb(JComboBox<String> empCmb) {
        this.empCmb = empCmb;
    }

    protected void setProvCmb(JComboBox<String> provCmb) {
        this.provCmb = provCmb;
    }

    protected JComboBox<String> getEmpCmb() {
        return empCmb;
    }

    protected JComboBox<String> getProvCmb() {
        return provCmb;
    }
    


}
